name: dev
on:
  push:
    branches: [ "dev" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Ensure private/public keys are in the correct directory
      run: |
        # Garantir que a pasta keys existe dentro de src/main/resources
        mkdir -p src/main/resources/keys
        # Criar as chaves com os nomes esperados pela aplicação
        echo "${{ secrets.PRIVATE_KEY }}" > src/main/resources/keys/private_key.pem
        echo "${{ secrets.PUBLIC_KEY }}" > src/main/resources/keys/public_key.pem

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Compile with Maven (no tests)
      run: mvn clean package
  
  test:
    needs: ['build']
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Ensure private/public keys are in the correct directory
      run: |
        # Garantir que a pasta keys existe dentro de src/main/resources
        mkdir -p src/main/resources/keys
        # Criar as chaves com os nomes esperados pela aplicação
        echo "${{ secrets.PRIVATE_KEY }}" > src/main/resources/keys/private_key.pem
        echo "${{ secrets.PUBLIC_KEY }}" > src/main/resources/keys/public_key.pem

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Run Tests
      run: mvn test
  deploy:
   needs: ['build', 'test']
   runs-on: ubuntu-latest
   steps:
    - uses: actions/checkout@v4
    - name: Ensure private/public keys are in the correct directory
      run: |
        # Garantir que a pasta keys existe dentro de src/main/resources
        mkdir -p src/main/resources/keys
        # Criar as chaves com os nomes esperados pela aplicação
        echo "${{ secrets.PRIVATE_KEY }}" > src/main/resources/keys/private_key.pem
        echo "${{ secrets.PUBLIC_KEY }}" > src/main/resources/keys/public_key.pem
    - name: Deploy to Render
      uses: JorgeLNJunior/render-deploy@v1.4.5
      with:
        # Render service id
        service_id: 
        # Render api key
        api_key: ${{ secrets.RENDER_API_KEY }}
        # Clear build cache
        clear_cache: # optional, default is false
        # Wait until the deploy status is successful
        wait_deploy: # optional, default is false
        # Creates a github deployment
        github_deployment: # optional, default is false
        # Github auth token
        github_token: 
        # The name of the GitHub deployment enviroment
        deployment_environment: # optional, default is production
              

